#!/bin/sh
#set -x
set -o errexit -o noclobber -o nounset

# This script transforms a lcg-cr command to a mostly equivalent
# gfal-copy command.
#
# - The output of the gfal-copy command is logged to the file defined
#   in the constant LOG_FILE if it exists and is writable.  If not, it
#   will output to stdout and stderr.  Errors in the input parameters
#   are always logged to stderr.  Modify the constant LOG_FILE at the
#   start of the script.
#
# - Environment variables LFC_HOST, LCG_GFAL_INFOSYS and
#   X509_USER_PROXY must be defined and have sensible values.
#
# - The script is specific to the biomed VO, and the
#   lfc-biomed.in2p3.fr server, as it removes the constant prefix
#   homepath "/grid/biomed" from the LFN filename.  It also uses the
#   default VO biomed if none is specified.  Change the VO at your own
#   risks.

# Constants

DEFAULT_VO=biomed
LOG_FILE=/home/vip/gfal/gfal.log
PYTHON=/bin/python
GFAL_COPY=/bin/gfal-copy

# End of constants

INPUT_ARGS="$0 $*"

show_help() {
    echo "This script transforms a lcg-cr command to an equivalent gfal-copy command."
    echo "$0 [ --config config_file ] [ -d dest_file | dest_host ] [ -g guid ] [ -h,--help ] [ -D,--defaultsetype defaulttype ] [ -T,--setype setype ] [ -l lfn ] [ -P relative_path ] [ -s,--st spacetokendesc ] [ -n nbstreams ] [ --connect-timeout conntimeout ] [ --sendreceive-timeout sndtimeout ] [ --bdii-timeout bdiitimeout ] [ --srm-timeout srmtimeout ] [ --vo virtual_organization ] [ --checksum-type cksmtype ] [ --checksum ] [ -b,--nobdii ] [ -v,--verbose ] [ -f,--nofilesizecheck ] [ --version ] --dst-protocols protocol_list ] src_file"
}

params=`getopt --options d:g:hD:T:l:P:s:n:b:vf: --long config:,help,defaultsetype:,setype:,st:,connect-timeout:,sendreceive-timeout:,bdii-timeout:,srm-timeout:,vo:,checksum-type:,checksum,nobdii,verbose,version --name $0 -- $@`
eval set -- "$params"

GFAL_OPTIONS="-p"
VO="${LCG_GFAL_VO:-}"
DEST_HOST=""
LFN=""
TOTAL_TIMEOUTS=0

while true
do
    case "$1" in
        --config)
            CONFIG_FILE="$2"
            echo "WARNING: $1 option is ignored" >&2
            shift 2
            ;;
        -d)
            DEST_HOST=$2
            shift 2
            ;;
        -g)
            GUID=$2
            echo "WARNING: $1 option is ignored" >&2
            shift 2
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        -D|--defaultsetype)
            DEFAULT_SETYPE="$2"
            echo "WARNING: $1 option is ignored" >&2
            shift 2
            ;;
        -T|--setype)
            SETYPE="$2"
            echo "WARNING: $1 option is ignored" >&2
            shift 2
            ;;
        -l)
            LFN=$2
            shift 2
            ;;
        -P)
            RELATIVE_PATH=$2
            echo "WARNING: $1 option is ignored" >&2
            shift 2
            ;;
        -s|--st)
            GFAL_OPTIONS="$GFAL_OPTIONS -s $2"
            shift 2
            ;;
        -n)
            GFAL_OPTIONS="$GFAL_OPTIONS -n $2"
            shift 2
            ;;
        --connect-timeout)
            TOTAL_TIMEOUTS=$(($TOTAL_TIMEOUTS + $2))
            shift 2
            ;;
        --sendreceive-timeout)
            TOTAL_TIMEOUTS=$(($TOTAL_TIMEOUTS + $2))
            GFAL_OPTIONS="$GFAL_OPTIONS -T $2"
            shift 2
            ;;
        --bdii-timeout)
            TOTAL_TIMEOUTS=$(($TOTAL_TIMEOUTS + $2))
            shift 2
            ;;
        --srm-timeout)
            TOTAL_TIMEOUTS=$(($TOTAL_TIMEOUTS + $2))
            shift 2
            ;;
        --vo)
            VO="$2"
            echo "WARNING: $1 option is ignored" >&2
            shift 2
            ;;
        --checksum-type)
            GFAL_OPTIONS="$GFAL_OPTIONS -K $2"
            shift 2
            ;;
        --checksum)
            echo "WARNING: $1 option is ignored" >&2
            shift
            ;;
        -b|--nobdii)
            echo "WARNING: $1 option is ignored" >&2
            shift
            ;;
        -v|--verbose)
            GFAL_OPTIONS="$GFAL_OPTIONS -v"
            shift
            ;;
        -f|--nofilesizecheck)
            echo "WARNING: $1 option is ignored" >&2
            shift
            ;;
        --version)
            ${GFAL_COPY} --version
            exit 0
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "ERROR: unknown option: $1" >&2
            exit 1
            ;;
    esac
done

if [ $# -ne 1 ]
then
    echo "Exactly 1 argument is needed.  Got $#." >&2
    exit 1
fi
SRC=`echo $1 | cut -d: -f 2`

if [ -z "$DEST_HOST" -o -z "$LFN" ]
then
    echo "Arguments -d <dest_host> and -l <lfn> are mandatory" >&2
    exit 1
fi

if [ -z "$VO" ]
then
    VO=$DEFAULT_VO
    echo "WARNING: The VO is undefined.  Either set LCG_GFAL_VO environment variable or use the --vo option." >&2
    echo "Using default VO: $DEFAULT_VO" >&2
fi

STORAGE_HOME=`lcg-compat.sh ${VO} ${DEST_HOST}`
DEST_FILE=`echo $LFN | sed -e 's/^lfn:\///'`
SRM=`echo $DEST_FILE | sed -e 's/^\/grid\/biomed//'`
SRM_FILE=srm://${DEST_HOST}${STORAGE_HOME}${SRM}

if [ "$TOTAL_TIMEOUTS" -gt 0 ]
then
    GFAL_OPTIONS="$GFAL_OPTIONS -t $TOTAL_TIMEOUTS"
fi

COMMAND="env -i \
    LCG_GFAL_INFOSYS=${LCG_GFAL_INFOSYS} \
    X509_USER_PROXY=${X509_USER_PROXY} \
    $PYTHON $GFAL_COPY $GFAL_OPTIONS \
    $SRC \
    $SRM_FILE \
    lfc://${LFC_HOST}${DEST_FILE}"

run_command() {
    COMMAND=$1
    INPUT_ARGS=$2
    echo "----------------------------------------------------------"
    echo "`date` $0 -> gfal-copy"
    echo "--"
    echo "$INPUT_ARGS"
    echo "=>"
    echo "$COMMAND"
    echo "--"
    eval "$COMMAND"
}

if [ -w $LOG_FILE ]
then
    run_command "$COMMAND" "$INPUT_ARGS" >> $LOG_FILE 2>&1
else
    run_command "$COMMAND" "$INPUT_ARGS"
fi
